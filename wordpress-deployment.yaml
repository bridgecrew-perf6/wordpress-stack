#---------------------------------------- MySql Resources ----------------------------------------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-stack  
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/release: alpha
    app.kubernetes.io/version: "0.1"
    app.kubernetes.io/environment: dev
    app.kubernetes.io/namespace: wordpress-stack
    app.kubernetes.io/part-of: wordpress-project
spec: 
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/release: alpha
      app.kubernetes.io/version: "0.1"
      app.kubernetes.io/environment: dev
      app.kubernetes.io/namespace: wordpress-stack
      app.kubernetes.io/part-of: wordpress-project      
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/release: alpha
        app.kubernetes.io/version: "0.1"
        app.kubernetes.io/environment: dev
        app.kubernetes.io/namespace: wordpress-stack
        app.kubernetes.io/part-of: wordpress-project          
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          envFrom:
            - secretRef:
                name: mysql-credentials
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: db
              mountPath: /var/lib/mysql
              readOnly: false
      volumes:
        - name: db
          emptyDir:
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-stack
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/release: alpha
    app.kubernetes.io/version: "0.1"
    app.kubernetes.io/environment: dev
    app.kubernetes.io/namespace: wordpress-stack
    app.kubernetes.io/part-of: wordpress-project          
  ports:
    - port: 3306
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-credentials
  namespace: wordpress-stack
type: opaque
stringData:
  MYSQL_ROOT_PASSWORD: stong-root-password
  MYSQL_DATABASE: wordpress
  MYSQL_USER: admin
  MYSQL_PASSWORD: strong-user-pass
#---------------------------------------- Wordpress Resources ----------------------------------------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-stack
  labels:
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/tier: frontend 
    app.kubernetes.io/version: "0.1"
    app.kubernetes.io/environment: dev
    app.kubernetes.io/namespace: wordpress-stack
    app.kubernetes.io/part-of: wordpress-project      
spec: 
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: wordpress
        app.kubernetes.io/tier: frontend 
        app.kubernetes.io/version: "0.1"
        app.kubernetes.io/environment: dev
        app.kubernetes.io/namespace: wordpress-stack
        app.kubernetes.io/part-of: wordpress-project
    template:
      metadata:
        labels:  
          app.kubernetes.io/name: wordpress
          app.kubernetes.io/tier: frontend 
          app.kubernetes.io/version: "0.1"
          app.kubernetes.io/environment: dev
          app.kubernetes.io/namespace: wordpress-stack
          app.kubernetes.io/part-of: wordpress-project
      spec:
        containers:
          - name: wordpress
            image: wordpress:5
            envFrom:
              - configMapRef:
                  name: wordpress-credentials
            ports:
              - containerPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-credentials
  namespace: wordpress-stack
data:            
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_USER: admin
  WORDPRESS_DB_PASSWORD: strong-user-pass
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_TABLE_PREFIX: ir_ 

---

apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-stack
spec:
  type: clusterIP
  selector:
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/tier: frontend 
    app.kubernetes.io/version: "0.1"
    app.kubernetes.io/environment: dev
    app.kubernetes.io/namespace: wordpress-stack
    app.kubernetes.io/part-of: wordpress-project
  ports:
    - port: 80
#---------------------------------------- phpmyadmin Resources ----------------------------------------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phpmyadmin
  namespace: wordpress-stack
  labels:
    app.kubernetes.io/name: phpmyadmin
    app.kubernetes.io/tier: frontend 
    app.kubernetes.io/version: "0.1"
    app.kubernetes.io/environment: dev
    app.kubernetes.io/namespace: wordpress-stack
    app.kubernetes.io/part-of: wordpress-project      
spec: 
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: phpmyadmin
        app.kubernetes.io/tier: frontend 
        app.kubernetes.io/version: "0.1"
        app.kubernetes.io/environment: dev
        app.kubernetes.io/namespace: wordpress-stack
        app.kubernetes.io/part-of: wordpress-project
    template:
      metadata:
        labels:  
          app.kubernetes.io/name: phpmyadmin
          app.kubernetes.io/tier: frontend
          app.kubernetes.io/version: "0.1"
          app.kubernetes.io/environment: dev
          app.kubernetes.io/namespace: wordpress-stack
          app.kubernetes.io/part-of: wordpress-project
      spec:
        containers:
          - name: phpmyadmin
            image: phpmyadmin:5.1
            envFrom:
              - configMapRef:
                  name: phpmyadmin-config
            ports:
              - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: phpmyadmin
  namespace: wordpress-stack
spec:
  type: clusterIP
  selector:
    app.kubernetes.io/name: phpmyadmin
    app.kubernetes.io/tier: frontend 
    app.kubernetes.io/version: "0.1"
    app.kubernetes.io/environment: dev
    app.kubernetes.io/namespace: wordpress-stack
    app.kubernetes.io/part-of: wordpress-project
  ports:
    - port: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: phpmyadmin-config
  namespace: wordpress-stack
data:            
  PMA_HOST: mysql
  PMA_PORT: !!str 3306
  # PMA_ARBITRARY: !!str 1